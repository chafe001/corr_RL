function corrRL_bAnalysis()

% first pass corrRL behavioral analysis program
% PENDING MODS TO TASK CODE TO FACILITATE DATA ANALYSIS
% 1. carry pairSeq through from generateStimMovie to bData outfile
% 2. save number of stim shown before response each trial
% 3. add trialResult and trialError data collection at runtime

tic;

% clear left over variables from prior runs...
clear;

% --- PARAMS ---
% params.trialSet = 'all';
params.maxHeaderCols = 60;
params.maxEventCodes = 300;
params.sepValue = -111111;
params.minTrials = 50;  % minimum trials per file to include
params.minReps = 4;  % minimum number of repetitions per trial to include
% --- RECODE stimuli IDs as integers, saved as strings
% from tbt_train_stage1_3arm.m (ML task code)
% Astim = 'greenpentagon.png'; 
% Bstim = 'bluetriangle.png'; 
% Cstim = 'orangerectangle.png';
params.Astim = 1; 
params.Bstim = 2;
params.Cstim = 3;
% --- RECODE stimuli locations
params.left = 1;
params.right = 2;
params.up = 3;

% --- CONTROL NUMBER OF VARIABLES INCLUDED IN OUTFILE
params.shortOutput = true;

params.rewardCode = 140; % behavioral code written by goodmonkey in tbt_vanilla_3arm_final.m

% if error, stop execution and hold variables in memory, don't exit
dbstop if error

% ------------------------ INITIALIZE
COMPUTER = getenv('COMPUTERNAME');
if (isempty(COMPUTER))
    COMPUTER = getenv('HOSTNAME');
end

switch COMPUTER
    case 'MATTWALLIN'
        stdInPath = 'D:\DATA\stdin\';
        stdOutPath = 'D:\DATA\stdout\';

    case 'DESKTOP-7CHQEHS'  % home PC
        stdInPath = 'D:\DATA\stdin\';
        stdOutPath = 'D:\DATA\stdout\';

    case 'MATT_MICRO'
        stdInPath = 'C:\MYFILES\1 DATA\stdin\';
        stdOutPath = 'C:\MYFILES\1 DATA\stdin\';

end

% ------------------------ GET LIST OF  FILES TO PROCEESS
cd(stdInPath);
pathFile = strcat(stdInPath, '*.bhv2');
fileNames  = dir(pathFile);
numFiles = length(fileNames);
if(numFiles == 0)
    error('No files in stdIn direction, put some files in there to analyze.');
end

% ------------- LOOP THROUGH FILE LIST, AGGREGATE BDATA ACROSS ENSEMBLES
% v5: adding trial count for bal pre per ensemble
bData = [];
rtData= [];

disp('accumulating bData...');

for thisFile = 1 : numFiles
    
    % ------------ INITIALIZE ENS LEVEL VARIABLES IN LOOP
    session_bData = [];

    % ------------- OPEN NEXT WINBIN FILE
    thisFileName = fileNames(thisFile).name;
    disp(thisFileName);
    pathFile = strcat(stdInPath, thisFileName);
    inDat = mlread(pathFile);  % data do not come in as subfield of 'ans' as in TOPX data so conversion here not necessary

    % ------------- AGGREGATE BDATA OVER TRIALS IN SESSION
    nTrials = size(inDat, 2);
    for t = 1 : nTrials
        inTrial = inDat(t);

        % --- pull behavioral data out of native ML structure array
        % format to construct matrix, recompute stdcol every trial is
        % redundant but code will be easier to maintain as changes to
        % extractTrial are made...
        if inTrial.TrialError == 9 
            if params.shortOutput
                [thisTrial stdcol] = extractTrial_short(inTrial, params, thisFile);  % pass in s for set counter in header
            else
                [thisTrial stdcol] = extractTrial_full(inTrial, params, thisFile);  % pass in s for set counter in header
            end

            session_bData = [session_bData; thisTrial];

        end

    end

    bob = 'here';

    % --- AGGREGATE BDATA OVER SESSIONS
    bData = [bData; session_bData];

end  % for thisFile = 1:numFiles


toc;

selHigh_trl = grpstats(bData(:, stdcol.selectedHighProb), bData(:, stdcol.trialInBlock));
selHigh_fp = grpstats(bData(:, stdcol.selectedHighProb), bData(:, stdcol.thisFalsePairRatio));


bob = 'done';

plot_bData(stdcol, bData);

end  
% -------------------------------------------------------------------------
% ------------------------- UTILITY FUNCTIONS -----------------------------
% -------------------------------------------------------------------------

% EXTRACT TRIAL FULL -----------------------------------------------------------
function [thisTrial stdcol] = extractTrial_full(inTrial, params, thisFile)

trialData = [];
eventData = [];

% --- AGGREGATE ML HEADER TRIAL DATA as originally saved
trialCountData = [thisFile inTrial.Trial inTrial.BlockCount inTrial.TrialWithinBlock inTrial.Block inTrial.Condition inTrial.TrialError...
    inTrial.AbsoluteTrialStartTime inTrial.TrialDateTime];

% --- add header vars to stdcol
stdcol.fileNum = 1;
stdcol.trial = stdcol.fileNum + 1;
stdcol.blockCount = stdcol.trial + 1;
stdcol.trialInBlock = stdcol.blockCount + 1;
stdcol.block = stdcol.trialInBlock + 1;
stdcol.cond = stdcol.block  + 1;
stdcol.trialError = stdcol.cond + 1;
stdcol.absStartTime = stdcol.trialError + 1;
stdcol.trialYear = stdcol.absStartTime + 1;
stdcol.trialMonth = stdcol.trialYear + 1;
stdcol.trialDay = stdcol.trialMonth + 1;
stdcol.trialHour = stdcol.trialDay + 1;
stdcol.trialMin = stdcol.trialHour + 1;
stdcol.trialSec = stdcol.trialMin + 1;
stdcol.endTrialCountData = stdcol.trialSec + 1;

% --- AGGREGATE PARAMS
nb = inTrial.UserVars.params.numBlocks;
rpc = inTrial.UserVars.params.repsPerCond;
switch inTrial.UserVars.params.blockChange
    case 'netWinsMode'
        bcm = 1;
    case 'condRepsMode'
        bcm = 2;
end
nwc = inTrial.UserVars.params.netWin_criterion;
csb = inTrial.UserVars.params.corrStrength_byBlock;
switch inTrial.UserVars.params.corrStrength_mode
    case 'noiseMix'
        csm = 1;
    case 'pairMix'
        csm = 2;
end
tfpr = inTrial.UserVars.condArray(inTrial.Condition).falsePairProportion;
fpr = inTrial.UserVars.params.falsePairRatios;
fpr_eb = inTrial.UserVars.params.falsePairRatio_easyBlock;
fpr_hb = inTrial.UserVars.params.falsePairRatio_hardBlock;
mpr = inTrial.UserVars.params.moviePairReps;
switch inTrial.UserVars.params.movieMode
    case 'stdp'
        mm = 1;
    case 'simultaneous'
        mm = 2;
end
hrp = inTrial.UserVars.params.highRewProb;
lrp = inTrial.UserVars.params.lowRewProb;

paramData = [nb rpc bcm nwc csb csm tfpr fpr fpr_eb fpr_hb mpr mm hrp lrp];

% --- add parameter vars to stdcol
stdcol.numBlocks = stdcol.endTrialCountData + 1;
stdcol.repsPerCond = stdcol.numBlocks + 1;
stdcol.blockChangeMode = stdcol.repsPerCond + 1;
stdcol.netWinCriterion = stdcol.blockChangeMode + 1;
stdcol.corrStrengthByBlock = stdcol.netWinCriterion + 1;
stdcol.corrStrengthMode = stdcol.corrStrengthByBlock + 1;
% --- compute number of falsePairRatios and count cols accordingly
numRatios = length(inTrial.UserVars.params.falsePairRatios);
stdcol.thisFalsePairRatio = stdcol.corrStrengthMode + 1;
stdcol.firstFalsePairRatio = stdcol.thisFalsePairRatio + 1;
stdcol.lastFalsePairRatio = stdcol.firstFalsePairRatio + (numRatios - 1);
stdcol.falsePairRaitio_easyBlock = stdcol.lastFalsePairRatio + 1;
stdcol.falsePairRatio_hardBlock = stdcol.falsePairRaitio_easyBlock + 1;
stdcol.moviePairReps = stdcol.falsePairRatio_hardBlock + 1;
stdcol.movieMode = stdcol.moviePairReps + 1;
stdcol.highRewProb = stdcol.movieMode + 1;
stdcol.lowRewProb = stdcol.highRewProb + 1;
stdcol.endParamData = stdcol.lowRewProb + 1;

% --- AGGREGATE CHOICE REWARD DATA
rs = inTrial.UserVars.condArray(inTrial.Condition).rewState;
r_t = inTrial.UserVars.choices.rewardTrial; 
rt = inTrial.ReactionTime;
bw = inTrial.UserVars.TrialRecord.User.blockWins;
bl = inTrial.UserVars.TrialRecord.User.blockLosses;
nw = inTrial.UserVars.TrialRecord.User.netWins;
switch inTrial.UserVars.choices.chosenColor
    case 'green'
        c_c = 1;  % cc is a matlab funciton call, hence underscore
    case 'red'
        c_c = 2;
end
switch inTrial.UserVars.choices.chosenSide
    case 'left'
        c_s = 1;
    case 'right'
        c_s = 2;
end
shp = inTrial.UserVars.choices.selectedHighProb;
rk = inTrial.UserVars.choices.responseKey;
% rnw = random number at runtime to determine whether to reward trial 
% according to reward state probabilities
rnw = inTrial.UserVars.choices.randNum_rew; 

switch inTrial.UserVars.choices.ch1_side
    case 'left'
        c1s = 1;
    case 'right'
        c1s = 2;
end

switch inTrial.UserVars.choices.ch2_side
    case 'left'
        c2s = 1;
    case 'right'
        c2s = 2;
end

c1rp = inTrial.UserVars.choices.ch1_rewProb;
c2rp = inTrial.UserVars.choices.ch2_rewProb;

rewChoiceData = [rs r_t rt bw bl nw c_c c_s shp rk rnw c1s c2s c1rp c2rp];

% --- add choice and reward vars to stdcol
stdcol.rewardState = stdcol.endParamData + 1;
stdcol.rewardTrial = stdcol.rewardState + 1;
stdcol.reactionTime = stdcol.rewardTrial + 1;
stdcol.blockWins = stdcol.reactionTime + 1;
stdcol.blockLosses = stdcol.blockWins + 1;
stdcol.netWins = stdcol.blockLosses + 1;
stdcol.chosenColor = stdcol.netWins + 1;
stdcol.chosenSide = stdcol.chosenColor + 1;
stdcol.selectedHighProb = stdcol.chosenSide + 1;
stdcol.responseKey = stdcol.selectedHighProb + 1;
stdcol.randNum_rew = stdcol.responseKey + 1;
stdcol.ch1_side = stdcol.randNum_rew + 1;
stdcol.ch2_side = stdcol.ch1_side + 1;
stdcol.ch1_rewProb = stdcol.ch2_side + 1;
stdcol.ch2_rewProb = stdcol.ch1_rewProb + 1;
stdcol.endChoiceData = stdcol.ch2_rewProb + 1;

% --- AGGREGATE STIM MOVIE DATA
% >>>> WORKING HERE: NEXT STEPS
% 1. add stim data in current output file format
% 2. implement changes listed above to task code
% 3. rerun task
% 4. fix bugs introduced by edits in data analysis code
% 5. run large set (> 100 trials)
% 6. implement basic data plotting/analysis funcitons to see if experiment
% works basically before trying model fits (RL, HMM, etc) to data
fp = inTrial.UserVars.condArray(inTrial.Condition).falsePairProportion;
s_t = inTrial.UserVars.movieFrameTimes;

% --- AGGREGATE EVENT CODES AND TIMES
numEventCodes = numel(inTrial.BehavioralCodes.CodeNumbers');
numEventTimes = numel(inTrial.BehavioralCodes.CodeTimes');

if numEventCodes ~= numEventTimes
    error('Numbers of beh event codes and times do not match');
end

missingCols = params.maxEventCodes - numEventCodes;
padVect = zeros(1, missingCols);

eventNums = [inTrial.BehavioralCodes.CodeNumbers' padVect];
eventTimes = [inTrial.BehavioralCodes.CodeTimes' padVect];

% --- add event vars to stdcol
stdcol.firstEventCodeCol = stdcol.endChoiceData + 1;
stdcol.endEventCodeData = stdcol.firstEventCodeCol + params.maxEventCodes;
stdcol.firstEventTimeCol = stdcol.endEventCodeData + 1;
stdcol.endEventTimeData = stdcol.firstEventTimeCol + params.maxEventCodes;

eventData = [eventNums params.sepValue eventTimes params.sepValue];

% numStimViewed = 
% netHits = 
% pairSeq pending =

switch rs
    case 1  
        pair1_stim1 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(1).stimPairID(1);
        pair1_stim2 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(1).stimPairID(2);
        pair2_stim1 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(2).stimPairID(1);
        pair2_stim2 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(2).stimPairID(2);
    case 2
        pair1_stim1 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(3).stimPairID(1);
        pair1_stim2 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(3).stimPairID(2);
        pair2_stim1 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(4).stimPairID(1);
        pair2_stim2 = inTrial.UserVars.condArray(inTrial.Condition).stimPairs(4).stimPairID(2);
end


bob = 1;

% % --- result code
% switch inTrial.UserVars.trialResult
%     case 'noEyeJoyFix'
%         resultCode = 0;
%     case 'breakFix_joy'
%         resultCode = 1;
%     case 'breakFix_eye'
%         resultCode = 2;
%     case 'breakFix_eye_joy'
%         resultCode = 3;
%     case 'correctChoice'
%         resultCode = 4;
%     case 'incorrectChoice'
%         resultCode = 5;
%     case 'noResponse'
%         resultCode = 6;
%     case  'joyReturnSuccess'
%         resultCode = 7;
% end

% --- CONCATENATE DATA TO BUILD TRIAL ROW
sep = params.sepValue;
thisTrial = [trialCountData sep paramData sep rewChoiceData sep eventData];

return;

end

% EXTRACT TRIAL SHORT -----------------------------------------------------------
function [thisTrial stdcol] = extractTrial_short(inTrial, params, thisFile)

trialData = [];
eventData = [];

% --- AGGREGATE ML HEADER TRIAL DATA as originally saved
trialCountData = [thisFile inTrial.Trial inTrial.BlockCount inTrial.TrialWithinBlock inTrial.Block inTrial.Condition inTrial.TrialError];

% --- add header vars to stdcol
stdcol.fileNum = 1;
stdcol.trial = stdcol.fileNum + 1;
stdcol.blockCount = stdcol.trial + 1;
stdcol.trialInBlock = stdcol.blockCount + 1;
stdcol.block = stdcol.trialInBlock + 1;
stdcol.cond = stdcol.block  + 1;
stdcol.trialError = stdcol.cond + 1;
stdcol.endTrialCountData = stdcol.trialError + 1;

% --- AGGREGATE PARAMS
nb = inTrial.UserVars.params.numBlocks;
rpc = inTrial.UserVars.params.repsPerCond;
switch inTrial.UserVars.params.blockChange
    case 'netWinsMode'
        bcm = 1;
    case 'condRepsMode'
        bcm = 2;
end
nwc = inTrial.UserVars.params.netWin_criterion;
csb = inTrial.UserVars.params.corrStrength_byBlock;
switch inTrial.UserVars.params.corrStrength_mode
    case 'noiseMix'
        csm = 1;
    case 'pairMix'
        csm = 2;
end
tfpr = inTrial.UserVars.condArray(inTrial.Condition).falsePairProportion;
fpr = inTrial.UserVars.params.falsePairRatios;
fpr_eb = inTrial.UserVars.params.falsePairRatio_easyBlock;
fpr_hb = inTrial.UserVars.params.falsePairRatio_hardBlock;
mpr = inTrial.UserVars.params.moviePairReps;
switch inTrial.UserVars.params.movieMode
    case 'stdp'
        mm = 1;
    case 'simultaneous'
        mm = 2;
end
hrp = inTrial.UserVars.params.highRewProb;
lrp = inTrial.UserVars.params.lowRewProb;

paramData = [nb rpc bcm nwc csb csm tfpr fpr fpr_eb fpr_hb mpr mm hrp lrp];

% --- add parameter vars to stdcol
stdcol.numBlocks = stdcol.endTrialCountData + 1;
stdcol.repsPerCond = stdcol.numBlocks + 1;
stdcol.blockChangeMode = stdcol.repsPerCond + 1;
stdcol.netWinCriterion = stdcol.blockChangeMode + 1;
stdcol.corrStrengthByBlock = stdcol.netWinCriterion + 1;
stdcol.corrStrengthMode = stdcol.corrStrengthByBlock + 1;
% --- compute number of falsePairRatios and count cols accordingly
numRatios = length(inTrial.UserVars.params.falsePairRatios);
stdcol.thisFalsePairRatio = stdcol.corrStrengthMode + 1;
stdcol.firstFalsePairRatio = stdcol.thisFalsePairRatio + 1;
stdcol.lastFalsePairRatio = stdcol.firstFalsePairRatio + (numRatios - 1);
stdcol.falsePairRaitio_easyBlock = stdcol.lastFalsePairRatio + 1;
stdcol.falsePairRatio_hardBlock = stdcol.falsePairRaitio_easyBlock + 1;
stdcol.moviePairReps = stdcol.falsePairRatio_hardBlock + 1;
stdcol.movieMode = stdcol.moviePairReps + 1;
stdcol.highRewProb = stdcol.movieMode + 1;
stdcol.lowRewProb = stdcol.highRewProb + 1;
stdcol.endParamData = stdcol.lowRewProb + 1;

% --- AGGREGATE CHOICE REWARD DATA
rs = inTrial.UserVars.condArray(inTrial.Condition).rewState;
r_t = inTrial.UserVars.choices.rewardTrial; 
rt = inTrial.ReactionTime;
bw = inTrial.UserVars.TrialRecord.User.blockWins;
bl = inTrial.UserVars.TrialRecord.User.blockLosses;
nw = inTrial.UserVars.TrialRecord.User.netWins;
switch inTrial.UserVars.choices.chosenColor
    case 'green'
        c_c = 1;  % cc is a matlab funciton call, hence underscore
    case 'red'
        c_c = 2;
end
switch inTrial.UserVars.choices.chosenSide
    case 'left'
        c_s = 1;
    case 'right'
        c_s = 2;
end
shp = inTrial.UserVars.choices.selectedHighProb;
rk = inTrial.UserVars.choices.responseKey;
% rnw = random number at runtime to determine whether to reward trial 
% according to reward state probabilities
rnw = inTrial.UserVars.choices.randNum_rew; 

switch inTrial.UserVars.choices.ch1_side
    case 'left'
        c1s = 1;
    case 'right'
        c1s = 2;
end

switch inTrial.UserVars.choices.ch2_side
    case 'left'
        c2s = 1;
    case 'right'
        c2s = 2;
end

c1rp = inTrial.UserVars.choices.ch1_rewProb;
c2rp = inTrial.UserVars.choices.ch2_rewProb;

rewChoiceData = [rs r_t rt bw bl nw c_c c_s shp rk rnw c1s c2s c1rp c2rp];

% --- add choice and reward vars to stdcol
stdcol.rewardState = stdcol.endParamData + 1;
stdcol.rewardTrial = stdcol.rewardState + 1;
stdcol.reactionTime = stdcol.rewardTrial + 1;
stdcol.blockWins = stdcol.reactionTime + 1;
stdcol.blockLosses = stdcol.blockWins + 1;
stdcol.netWins = stdcol.blockLosses + 1;
stdcol.chosenColor = stdcol.netWins + 1;
stdcol.chosenSide = stdcol.chosenColor + 1;
stdcol.selectedHighProb = stdcol.chosenSide + 1;
stdcol.responseKey = stdcol.selectedHighProb + 1;
stdcol.randNum_rew = stdcol.responseKey + 1;
stdcol.ch1_side = stdcol.randNum_rew + 1;
stdcol.ch2_side = stdcol.ch1_side + 1;
stdcol.ch1_rewProb = stdcol.ch2_side + 1;
stdcol.ch2_rewProb = stdcol.ch1_rewProb + 1;
stdcol.endChoiceData = stdcol.ch2_rewProb + 1;

% --- CONCATENATE DATA TO BUILD TRIAL ROW
sep = params.sepValue;
thisTrial = [trialCountData sep paramData sep rewChoiceData sep eventData];

return;

end

% PLOT BDATA -------------------------------------------------------------
function [] = plot_bData(stdcol, bData)

bob = 1;

% plot probability of selecting high value target as a function of trial
% within block, are we learning yet?

hp_by_trlBlk = grpstats(bData(:, stdcol.selectedHighProb), bData(:, stdcol.trialInBlock));
figure;
plot(hp_by_trlBlk);

hp_by_corr = grpstats(bData(:, stdcol.selectedHighProb), bData(:, stdcol.thisFalsePairRatio));
figure;
plot(hp_by_corr);


% divide data by corrStrength

bd_fpr = unique(bData(:, stdcol.thisFalsePairRatio));
figure;
hold on;
for f = 1 : length(bd_fpr)

    thisLevel = bData(bData(:, stdcol.thisFalsePairRatio) == bd_fpr(f), :);

    perf = grpstats(thisLevel(:, stdcol.selectedHighProb), thisLevel(:, stdcol.trialInBlock));

    plot(perf);

end


end




% ANALYZE BDATA -----------------------------------------------------------
function [] = analyze_bData(bData, stdcol, params)

keepData = [];

% --- create consecutive trial numbers for each file/set
filesHere = unique(bData(:, stdcol.fileNum));
for f = 1 : numel(filesHere)
    fileMat = bData(bData(:, stdcol.fileNum) == filesHere(f), :);
    consTrials = (1:size(fileMat, 1));
    fileMat(:, stdcol.trial) = consTrials';
    if numel(consTrials) < params.minTrials
        continue
    end
    keepData = [keepData; fileMat];
end

% ---- Plot stim choice (A, B or C) on same axes, per file (day) in the
% aggregated data
left = 2.0;
bottom = 2.0;
width = 36.0;
height = 6.0;
trialStart = 0;
% trialStop = 600;
trialStop = size(bData, 1);

filesHere = unique(keepData(:, stdcol.fileNum));

for f = 1 : numel(filesHere)
    thisFile = keepData(keepData(:, stdcol.fileNum) == filesHere(f), :);

    % --- RUN BECKET'S HMM CODE
    [states,stateProbs,LL,nParams,Tall,Eall] = find3States(thisFile(:, stdcol.choseStim)');

    state1 = (states(:) == 1);
    state2 = (states(:) == 2);
    state3 = (states(:) == 3);
    state4 = (states(:) == 4);

    explore = (states(:) == 1);
    exploit = (states(:) ~= 1);

    % --- shift explore/exploit values up for plotting with choices on same axes
    explore = explore + 3.0;
    exploit = exploit + 3.0;

    % --- PLOT explore/exploit
    figure;
    pExplore = plot(explore);
    pExplore.Color = "magenta";
    pExplore.LineWidth = 1.5;
    hold on;
    pExploit = plot(exploit);
    pExploit.Color = "black";
    pExploit.LineWidth = 1.5;

    % --- ADD choice L, R, U (left, right, up)
    plotL = plot(thisFile(:, stdcol.choseLeft) + 1.5);
    plotL.Color = [0.4940 0.1840 0.5560];  % purple
    plotL.LineWidth = 1.5;

    plotR = plot(thisFile(:, stdcol.choseRight) + 1.5);
    plotR.Color = [0.9290 0.6940 0.1250];  % orange
    plotR.LineWidth = 1.5;

    plotR = plot(thisFile(:, stdcol.choseUp) + 1.5);
    plotR.Color = [0 0.4470 0.7410];  % blue
    plotR.LineWidth = 1.5;
    
    % --- ADD choice A, B, C (greenpentagon, bluetriangle, orangerectangle)
    plotA = plot(thisFile(:, stdcol.choseA));
    plotA.Color = "green";
    plotA.LineWidth = 1.5;

    hold on;
    plotB = plot(thisFile(:, stdcol.choseB));
    plotB.Color = "blue";
    plotB.LineWidth = 1.5;

    plotC = plot(thisFile(:, stdcol.choseC));
    plotC.Color = [1 0.6 0];  % orange
    plotC.LineWidth = 1.5;

    % --- add title, use cell array for multiple lines
    title({"STATE (top) Explore=Magenta Exploit=Black", "DIRECTION (middle) chose Left=Purple, Right=Orange, Up=Dk Blue", "OBJECT (bottom) chose A=Green(pentagon) B=Blue(triangle) C=Orange(rectangle)"});

    % reformat plot
    axis([trialStart, trialStop, -0.5, 5.0]);  %  reset ranges for x and y axes
    set(gca, 'Units', 'centimeters');
    set(gca, 'FontName', 'Arial');
    set(gca, 'FontSize', 9);
    set(gca, 'FontSmoothing', 'off');
    set(gca, 'TickDir', 'out');                     %  switch side of axis for tick marks
    set(gca, 'Box', 'off');
    set(gca, 'Position', [left bottom width height]);
    set(gca, 'TickLength', [0.01 0.01]);
    set(gca, 'xTick', trialStart:20:trialStop);

end

% --- plot response probability as a function of reward probability
left = 2.0;
bottom = 2.0;
width = 4.0;
height = 4.0;
figure
hist(keepData(:, stdcol.choseProb));
set(gca, 'Units', 'centimeters');
set(gca, 'FontName', 'Arial');
set(gca, 'FontSize', 9);
set(gca, 'FontSmoothing', 'off');
set(gca, 'TickDir', 'out');                     %  switch side of axis for tick marks
set(gca, 'Box', 'off');
set(gca, 'Position', [left bottom width height]);
set(gca, 'TickLength', [0.03 0.03]);
set(gca, 'xTick', 0:0.1:1);
set(gca, 'yTick', 0:250:1500);

bob = 1;

return;

end

% TO-DO: save data to outfile?
